#!/bin/sh
# Description: display system information on dwm bar
# Dependencies: iw, alsa-utils, mpc, xsetroot
# Shell: POSIX Compliant
# set -e

# INIT
echo "$$" > ~/.cache/pidofbar
sec="$(date +%S)"
interface="wlan0"

# wait for dwlb
# while true; do
# 	sleep 1
# 	if pgrep -x dwlb >/dev/null; then
# 		break
# 	fi
# done

update_time() {
	time="$(date "+%b %d - %H:%M")"
}

update_wifi() {
	hash iw || return
	test -d /sys/class/net/$interface || return
	ssid=$(iw $interface link | awk -F': ' '/SSID/ {print $2}')

	read -r state </sys/class/net/$interface/operstate
	if [ "$state" = "down" ]; then
		icon=""
	else
		icon=" "
	fi

	wifi="$(printf "%s%s" "$icon" "$ssid")"
}

update_temp(){
	test -d /sys/class/thermal/thermal_zone1 || return
	read -r temperature </sys/class/thermal/thermal_zone1/temp
	temp="$(printf "󰈐 %.2s" "$temperature")"
}

update_bat() {
	test -d /sys/class/power_supply/BAT1 || return
	read -r bat_status </sys/class/power_supply/BAT1/status
	read -r bat_capacity </sys/class/power_supply/BAT1/capacity
	if [ "$bat_status" = "Charging" ]; then
		bat_status="󰂄"
	else 
		bat_status="󰁹"
	fi

	bat="$(printf "%s %s%%" "$bat_status" "$bat_capacity")"
}

update_vol() {
	avol="$(amixer get Master |grep -m1 -o "[0-9]*%")"
	vol_status="$(amixer get Master |grep -cm1 "\[on\]")"

	if [ "$vol_status" = "1" ]; then
		vol="$(printf "󰕾 %s" "$avol")"
	else
		vol="󰖁"
	fi
}

update_mpd() {
	state="$(mpc status %state%)"

	if [ "$state" != "playing" ]; then
		mediainfo=""
		return
	fi


	mpc="$(mpc current -f "[%artist% - %title%]")"
	[ -z "$mpc" ] && mediainfo="󰋄 Playing" && return
	mediainfo="$(printf "󰋄 %s" "$mpc")"
}

update_mic() {
	mic_status="$(amixer get Capture |grep -cm1 "\[on\]")"
	if [ "$mic_status" = "1" ]; then
		mic=""
		return
	fi

	mic=""
}

display() {
	status=""
	[ -n "$mediainfo" ] && status="$status$mediainfo "
	[ -n "$mic" ] && status="$status$mic "
	[ -n "$vol" ] && status="$status$vol "
	[ -n "$time" ] && status="$status$time"
	echo " $status"
}

# Initial updates
update_vol
update_time
display

# Handles receiving signal
trap   "update_vol; display"    "RTMIN"
trap   "update_mpd; display"    "RTMIN+1"
trap   "update_mic; display"    "RTMIN+2"

while true
do
	sleep 1 &
	wait && {
		case $((sec % 60 )) in
			0)
				update_time
				display
				;;
		esac
		sec=$((sec + 1))
	}
done
