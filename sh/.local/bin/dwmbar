#!/bin/sh
# Description: display system information on dwm bar
# set -e

# INIT
echo "$$" > "$HOME/.cache/pidofbar"
sec="60"
interface="wlan0"

update_time() {
	time="$(date "+%b %d - %H:%M")"
}

update_wifi() {
	hash iw || return
	test -d /sys/class/net/$interface || return
	ssid=$(iw $interface link | awk -F': ' '/SSID/ {print $2}')

	read -r state </sys/class/net/$interface/operstate
	if [ "$state" = "down" ]; then
		icon=""
	else
		icon=" "
	fi

	wifi="$(printf "%s%s" "$icon" "$ssid")"
}

update_temp(){
	test -d /sys/class/thermal/thermal_zone1 || return
	read -r temperature </sys/class/thermal/thermal_zone1/temp
	temp="$(printf "󰈐 %.2s" "$temperature")"
}

update_bat() {
	test -d /sys/class/power_supply/BAT1 || return
	read -r bat_status </sys/class/power_supply/BAT1/status
	read -r bat_capacity </sys/class/power_supply/BAT1/capacity
	if [ "$bat_status" = "Charging" ]; then
		bat_status="󰂄"
	else 
		bat_status="󰁹"
	fi

	bat="$(printf "%s %s%%" "$bat_status" "$bat_capacity")"
}

update_vol() {
	avol="$(wpctl get-volume @DEFAULT_AUDIO_SINK@ | awk '{print $2*100}')"
	vol_status="$(wpctl status | grep -m 1 -A 1 "Sinks" | grep -c "MUTED")"

	if [ "$vol_status" = "0" ]; then
		vol="$(printf "󰕾 %s" "$avol")"
	else
		vol="󰖁"
	fi
}

update_mediainfo() {
	state="$(playerctl --player=mpd metadata --format '{{status}}')"
	if [ "$state" = "Playing" ]; then
		mediainfo=" $(playerctl metadata --player=mpd --format '{{ artist }} - {{ title }}')"
	else
		mediainfo=""
	fi
}

update_mic() {
	mic_status="$(wpctl status | grep -m 1 -A 1 "Sources" | grep -c "MUTED")"
	if [ "$mic_status" = "0" ]; then
		mic=""
	else
		mic=" "
	fi
}

subscribe_playerctl() {
	playerctl --follow status | while read -r _; do
		kill -RTMIN+1 "$(cat "$HOME"/.cache/pidofbar)"
	done &
}

subscribe_pactl() {
	pactl subscribe | while read -r line; do
		pid="$(cat "$HOME"/.cache/pidofbar)"
		case "$line" in
			*"Event 'change' on sink"*)
				kill -RTMIN "$pid" # volume
				;;
			*"Event 'change' on source"*)
				kill -RTMIN+2 "$pid" # microphone
				;;
		esac
	done &
}

display() {
	status=""
	[ -n "$mediainfo" ] && status="$status$mediainfo "
	[ -n "$mic" ] && status="$status$mic "
	[ -n "$vol" ] && status="$status$vol "
	[ -n "$time" ] && status="$status$time"
	echo " $status"
}

# Initial updates
update_vol
update_mic
display

# Subscribe to events
subscribe_playerctl
subscribe_pactl

# Handles receiving signal
trap   "update_vol; display"          "RTMIN"
trap   "update_mediainfo; display"    "RTMIN+1"
trap   "update_mic; display"          "RTMIN+2"

while true
do
	sleep 1 &
	wait "$!" && {
		case $((sec % 60 )) in
			0)
				update_time
				display
				;;
		esac
		sec=$((sec + 1))
	}
done
